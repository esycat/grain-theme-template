apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'config'

group = 'com.sysgears.grain'
version = '0.3.2-SNAPSHOT'
defaultTasks 'grain'

ext {
    mainClassName = [project.group, 'Main'].join('.')
    compatibilityVersion = JavaVersion.VERSION_1_5
}

sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

clean.doLast { ant.delete(dir: '.cache'); ant.delete(dir: 'target') }

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.esyfur:gradle-config-plugin:0.4.+'
    }
}

cfgutil.load('application')

if (!config.grain?.version) {
    throw new RuntimeException('Grain version is not set in properties file')
}

configurations.all {
    exclude group: 'commons-logging'
    exclude group: 'rhino'

    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.sysgears.com/releases/'
    }
    maven {
        url 'http://repo.sysgears.com/snapshots/'
    }
}

dependencies {
    compile "com.sysgears.grain:grain:${config.grain.version}"

    compile 'org.codehaus.groovy:groovy:2.1.2'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['theme/src']
        }
    }
}

project.ext {
    classpath = sourceSets.main.runtimeClasspath
}

task gendeps {
    doLast {
        def classpath = project.classpath.files
        def depFile = new File(".site-${config.grain.version}.dep")
        depFile.withWriter { writer ->
            classpath.findAll { it.name.endsWith('.jar') }.sort {
                !it.name.endsWith("grain-${config.grain.version}.jar")
            }.each {
                writer.append(it.toString()).append('\n')
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

idea {
    module {
        excludeDirs = ['.cache', '.idea', '.gradle', '.nb-gradle', '.settings', 'bin', 'out', 'target', 'gradle'].collect { file(it) }
    }
}

task generate(type: JavaExec) {
    logging.captureStandardOutput LogLevel.INFO
    classpath sourceSets.main.runtimeClasspath
    main = mainClassName
    args name
}
